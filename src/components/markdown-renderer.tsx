
"use client"

// For a more robust solution, consider using 'react-markdown' and 'remark-gfm'.
// This is a very basic renderer for demonstration.

interface MarkdownRendererProps {
  content: string;
}

export default function MarkdownRenderer({ content }: MarkdownRendererProps) {
  // This is a very simplified and insecure way to render markdown.
  // In a real app, use a proper library like react-markdown.
  const createMarkup = () => {
    let html = content;
    // Headlines
    html = html.replace(/^# (.*$)/gim, '<h1 class="text-3xl font-bold my-4">$1</h1>');
    html = html.replace(/^## (.*$)/gim, '<h2 class="text-2xl font-semibold my-3">$1</h2>');
    html = html.replace(/^### (.*$)/gim, '<h3 class="text-xl font-semibold my-2">$1</h3>');
    // Bold
    html = html.replace(/\*\*(.*)\*\*/gim, '<strong>$1</strong>');
    html = html.replace(/__(.*)__/gim, '<strong>$1</strong>');
    // Italic
    html = html.replace(/\*(.*)\*/gim, '<em>$1</em>');
    html = html.replace(/_(.*)_/gim, '<em>$1</em>');
    // Lists (very basic)
    html = html.replace(/^\* (.*$)/gim, '<ul class="list-disc pl-5 mb-2"><li>$1</li></ul>'); // this will create separate uls
    html = html.replace(/^\- (.*$)/gim, '<ul class="list-disc pl-5 mb-2"><li>$1</li></ul>');
    html = html.replace(/^\d+\. (.*$)/gim, '<ol class="list-decimal pl-5 mb-2"><li>$1</li></ol>');
    // Code blocks (basic)
    html = html.replace(/```([\s\S]*?)```/gim, '<pre class="bg-muted p-4 rounded-md overflow-x-auto my-4"><code class="font-code">$1</code></pre>');
    // Inline code
    html = html.replace(/`(.*?)`/gim, '<code class="bg-muted px-1 py-0.5 rounded text-sm font-code">$1</code>');
    // Paragraphs
    html = html.split(/\n\n+/).map(p => `<p class="mb-4 leading-relaxed">${p.replace(/\n/g, '<br/>')}</p>`).join('');
    // Clean up multiple <ul> and <ol> tags that might be generated by the simple list replacement
    html = html.replace(/<\/ul>\s*<ul class="list-disc pl-5 mb-2">/gim, '');
    html = html.replace(/<\/ol>\s*<ol class="list-decimal pl-5 mb-2">/gim, '');

    return { __html: html };
  };

  return (
    <article className="prose dark:prose-invert max-w-none" dangerouslySetInnerHTML={createMarkup()} />
  );
}
